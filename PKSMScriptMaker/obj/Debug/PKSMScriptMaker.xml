<?xml version="1.0"?>
<doc>
<assembly>
<name>
PKSMScriptMaker
</name>
</assembly>
<members>
<member name="T:PKSMScriptMaker.My.Resources.Resources">
<summary>
  A strongly-typed resource class, for looking up localized strings, etc.
</summary>
</member>
<member name="P:PKSMScriptMaker.My.Resources.Resources.ResourceManager">
<summary>
  Returns the cached ResourceManager instance used by this class.
</summary>
</member>
<member name="P:PKSMScriptMaker.My.Resources.Resources.Culture">
<summary>
  Overrides the current thread's CurrentUICulture property for all
  resource lookups using this strongly typed resource class.
</summary>
</member>
<member name="P:PKSMScriptMaker.My.Resources.Resources.genScripts">
<summary>
  Looks up a localized string similar to #!/usr/bin/env python3
import shlex, PKSMScript, sys, glob, shutil, os

games = [&quot;PSM&quot;, &quot;USUM&quot;, &quot;SM&quot;, &quot;ORAS&quot;, &quot;XY&quot;, &quot;B2W2&quot;, &quot;BW&quot;, &quot;HGSS&quot;, &quot;PT&quot;, &quot;DP&quot;]

def main(args):
	if os.path.isdir(&quot;scripts&quot;):
		for game in games:
			if os.path.isfile(&quot;scripts%s.txt&quot; % game):
				generate(game)
				if game == &quot;PSM&quot;:
					scriptFiles = glob.glob(&quot;*.pksm&quot;)
					for pksmFile in scriptFiles:
						shutil.move(pksmFile,&quot;scripts&quot;)
					os.remove(&quot;scriptsPSM.txt&quot;)
				else:
					scriptFiles = glob.glob(&quot;*.pksm&quot;)
					for pksmF [rest of string was truncated]&quot;;.
</summary>
</member>
<member name="P:PKSMScriptMaker.My.Resources.Resources.PKSMScript">
<summary>
  Looks up a localized string similar to #!/usr/bin/python3
import argparse


# PKSM script structure
# u8 magic[10]        // PKSMSCRIPT
# u32 offset          // save offset to write the data to
# u32 length          // payload length
# u8 payload[len]     // payload data
# u32 repeat_times    // repeat payload n times
# ...
 
 
parser = argparse.ArgumentParser(description = &apos;Creates .pksm script files&apos;)
parser.add_argument(&apos;output&apos;, help = &apos;Output file name&apos;)
parser.add_argument(&apos;-i&apos;, action = &apos;append&apos;, nargs = 4, metavar = (&apos;ofs&apos;, &apos;len&apos;, &apos;pld&apos;, [rest of string was truncated]&quot;;.
</summary>
</member>
</members>
</doc>
